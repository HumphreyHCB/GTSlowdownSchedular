{
  "identifier": "HotSpotCompilation-255[havlak.LoopTesterApp.constructCFG(int, int, int)]",
  "method": "havlak.LoopTesterApp.constructCFG(int, int, int)void",
  "entryBCI": -1,
  "codeSignature": "939ed8a2dc157dae687c9de30dcfdc30befc1317b2d2421fd83f95dced9e50c4",
  "graphSignature": "ea274f890748f48f847acefcad697cac10540b1b82a8f953b1ec959d596b1cd7",
  "result": true,
  "profiles": [{
    "method": "havlak.LoopTesterApp.constructCFG(int, int, int)void",
    "isMature": false,
    "compilerIRSize": -1,
    "data": []
  },
  {
    "method": "havlak.LoopTesterApp.constructCFG(int, int, int)void",
    "isMature": true,
    "compilerIRSize": -1,
    "data": [{
      "bci": 9,
      "branchTakenProbability": 0.09025270758122744
    },
    {
      "bci": 20,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 42,
      "branchTakenProbability": 0.09097472924187726
    },
    {
      "bci": 53,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 64,
      "branchTakenProbability": 0.16666666666666666
    },
    {
      "bci": 70,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 85,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 95,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.LoopTesterApp.buildConnect(int, int)void",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 10,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.ControlFlowGraph.createNode(int)havlak.BasicBlock",
    "isMature": true,
    "compilerIRSize": -1,
    "data": [{
      "bci": 5,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 8,
      "branchTakenProbability": 0.33242214195060044
    },
    {
      "bci": 16,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 19,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 31,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 41,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 49,
      "branchTakenProbability": 0.999707145646232
    }]
  },
  {
    "method": "havlak.ControlFlowGraph.getNumNodes()int",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 4,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "som.Vector.size()int",
    "isMature": false,
    "compilerIRSize": -1,
    "data": []
  },
  {
    "method": "som.Vector.at(int)java.lang.Object",
    "isMature": true,
    "compilerIRSize": -1,
    "data": [{
      "bci": 5,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 6,
      "branchTakenProbability": 0.9995118140988088
    },
    {
      "bci": 16,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.BasicBlock.<init>(int)void",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 1,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "som.Vector.<init>(int)void",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 1,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 6,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "som.Vector.atPut(int, java.lang.Object)void",
    "isMature": true,
    "compilerIRSize": -1,
    "data": [{
      "bci": 5,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 6,
      "branchTakenProbability": 0.9973764757324005
    },
    {
      "bci": 13,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 17,
      "branchTakenProbability": 0.5
    },
    {
      "bci": 45,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 53,
      "branchTakenProbability": 0.0
    }]
  },
  {
    "method": "java.util.Arrays.copyOf(java.lang.Object[], int)java.lang.Object[]",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 3,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 6,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "java.util.Arrays.copyOf(java.lang.Object[], int, java.lang.Class)java.lang.Object[]",
    "isMature": true,
    "compilerIRSize": -1,
    "data": [{
      "bci": 3,
      "branchTakenProbability": 0.015390609779855834
    },
    {
      "bci": 7,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 14,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 18,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 21,
      "exceptionSeen": "FALSE",
      "typeProfile": {
        "nullSeen": "FALSE",
        "types": [{
          "type": "[Ljava/lang/invoke/LambdaForm$Name;",
          "probability": 0.9620253164556962
        },
        {
          "type": "[Ljava/lang/Class;",
          "probability": 0.0379746835443038
        }],
        "notRecordedProbability": 0.0
      }
    },
    {
      "bci": 30,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 32,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 35,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.BasicBlockEdge.<init>(havlak.ControlFlowGraph, int, int)void",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 1,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 7,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 16,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 30,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 41,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 46,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.BasicBlock.addOutEdge(havlak.BasicBlock)void",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 5,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.BasicBlock.addInEdge(havlak.BasicBlock)void",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 5,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.ControlFlowGraph.addEdge(havlak.BasicBlockEdge)void",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 5,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "som.Vector.append(java.lang.Object)void",
    "isMature": true,
    "compilerIRSize": -1,
    "data": [{
      "bci": 8,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 9,
      "branchTakenProbability": 0.9996094512790471
    },
    {
      "bci": 22,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 39,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.LoopTesterApp.buildStraight(int, int)int",
    "isMature": true,
    "compilerIRSize": -1,
    "data": [{
      "bci": 4,
      "branchTakenProbability": 0.5
    },
    {
      "bci": 16,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.LoopTesterApp.buildBaseLoop(int)int",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 3,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 9,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 16,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 24,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 33,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 43,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 49,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 56,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 63,
      "exceptionSeen": "FALSE"
    }]
  },
  {
    "method": "havlak.LoopTesterApp.buildDiamond(int)int",
    "isMature": false,
    "compilerIRSize": -1,
    "data": [{
      "bci": 14,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 30,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 48,
      "exceptionSeen": "FALSE"
    },
    {
      "bci": 66,
      "exceptionSeen": "FALSE"
    }]
  }]
}